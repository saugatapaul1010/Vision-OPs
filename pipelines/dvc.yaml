# The ML pipeline configurations for this project

# Note: Raw data must be added to the cache outside the pipeline.

vars:
  - ../configs/params.yaml
  - data_path:
      raw: data/raw
      prepared: data/prepared

stages:
  raw_data_expectation_check:
    cmd: python great_expectations/uncommitted/run_image_info_and_bbox_ckpt.py
    wdir: ..
    deps:
      - ${image_data_paths.info_csv_file}
      - ${image_data_paths.bboxes_csv_file}
    outs:
      - great_expectations/uncommitted/validations/image_info_ge_suite/run-ckpt:
          cache: false
          persist: true
      - great_expectations/uncommitted/validations/image_bboxes_ge_suite/run-ckpt:
          cache: false
          persist: true
      - great_expectations/uncommitted/data_docs/local_site/validations/image_info_ge_suite/run-ckpt:
          cache: false
          persist: true
      - great_expectations/uncommitted/data_docs/local_site/validations/image_bboxes_ge_suite/run-ckpt:
          cache: false
          persist: true
    desc: 'Check raw data against predefined expectations'

  raw_data_bbox_duplication_check:
    cmd: python data_checks/check_bbox_duplicates_and_two_dataset_similarity.py --check_data_type=raw
    wdir: ..
    deps:
      - great_expectations/uncommitted/validations/image_info_ge_suite/run-ckpt
      - great_expectations/uncommitted/validations/image_bboxes_ge_suite/run-ckpt
    outs:
      - data_checks/data_check_results/raw_bbox_duplicates_check_results.html:
          cache: false
    desc: 'Check raw data for duplicate bounding boxes'

  raw_data_integrity_check:
    cmd: python data_checks/check_img_info_and_bbox_csv_file_integrity.py --check_data_type=raw
    wdir: ..
    deps:
      - great_expectations/uncommitted/validations/image_info_ge_suite/run-ckpt
      - great_expectations/uncommitted/validations/image_bboxes_ge_suite/run-ckpt
      - data_checks/data_check_results/raw_bbox_duplicates_check_results.html
    outs:
      - data_checks/data_check_results/raw_csv_file_check_results.json:
          cache: false
    desc: 'Check raw data for integrity'

  train_test_data_split:
    cmd: python src/data/prepare_data.py
    wdir: ..
    deps:
      - great_expectations/uncommitted/validations/image_info_ge_suite/run-ckpt
      - great_expectations/uncommitted/validations/image_bboxes_ge_suite/run-ckpt
      - data_checks/data_check_results/raw_bbox_duplicates_check_results.html
      - data_checks/data_check_results/raw_csv_file_check_results.json
    outs:
      - ${data_path.prepared}
      - ${model_training_inference_conf.save_model_output_dir}/plots/eda:
          cache: false
    desc: 'Split raw data into training and test sets'

  train_test_similarity_check:
    cmd: python data_checks/check_bbox_duplicates_and_two_dataset_similarity.py --check_data_type=prepared
    wdir: ..
    deps:
      - ${image_data_paths.train_csv_file}
      - ${image_data_paths.test_csv_file}
    outs:
      - data_checks/data_check_results/prepared_train_test_similarity_check_results.html:
          cache: false
      - data_checks/data_check_results/prepared_train_test_author_leakage_check_results.html:
          cache: false
    desc: 'Check training and test datasets for similarity'

  hyperparam_optimization:
    cmd: python src/train/optimize_hyperparams.py
    wdir: ..
    deps:
      - ${image_data_paths.train_csv_file}
      - data_checks/data_check_results/prepared_train_test_similarity_check_results.html
      - data_checks/data_check_results/prepared_train_test_author_leakage_check_results.html
    params:
      - configs/params.yaml:
        - hyperparameter_optimization
        - image_dataset_conf.batch_size
        - object_detection_model.load_parameters
        - object_detection_model.number_classes
        - model_training_inference_conf.evaluation_iou_threshold
        - model_training_inference_conf.evaluation_beta
    outs:
      - ${hyperparameter_optimization.save_best_parameters_path}:
          cache: false
      - ${hyperparameter_optimization.save_study_dir}/hyper_opt_studies.db:
          cache: false
          persist: true
      - ${hyperparameter_optimization.save_study_dir}/${hyperparameter_optimization.study_name}/plots
    desc: 'Find the best hyperparameters for model training'

  model_fine_tuning:
    cmd: python src/train/fine_tune_model.py
    wdir: ..
    deps:
      - ${hyperparameter_optimization.save_best_parameters_path}
    params:
      - ${hyperparameter_optimization.save_best_parameters_path}:
      - configs/params.yaml:
        - model_training_inference_conf.epochs
        - model_training_inference_conf.metric_to_find_best
        - model_training_inference_conf.initial_metric_value
        - model_training_inference_conf.evaluation_iou_threshold
        - model_training_inference_conf.evaluation_beta
        - model_training_inference_conf.checkpoint
        - image_dataset_conf.batch_size
        - object_detection_model
        - mlflow_tracking_conf
    outs:
      - mlruns:
          cache: false
          persist: true
      - ${object_detection_model.save_dir}:
          persist: true
      - ${model_training_inference_conf.save_model_output_dir}/val_outs
    desc: 'Fine-tune a model on the specific dataset'

  model_performance_on_test_data:
    cmd: python src/train/model_test_performance.py
    wdir: ..
    deps:
      - mlruns
      - ${image_data_paths.test_csv_file}
    params:
      - configs/params.yaml:
        - model_training_inference_conf.license_pattern_to_select_images
    outs:
      - ${model_training_inference_conf.save_model_output_dir}/test_outs:
          cache: false
    desc: 'Get model performance on a test dataset'

  model_stage_update:
    cmd: python src/model/update_model_stages.py --only_if_test_score_is_best=True
    wdir: ..
    deps:
      - mlruns/mlruns.db
      - ${model_training_inference_conf.save_model_output_dir}/test_outs/test_score.json
    params:
      - ${model_training_inference_conf.save_model_output_dir}/test_outs/test_score.json:
      - configs/params.yaml:
        - model_training_inference_conf.metrics_to_plot
    outs:
      - ${model_training_inference_conf.save_model_output_dir}/plots/metrics:
          cache: false
    desc: 'Update model version stages to "Production" or "Archived" in a Mlflow registry'

  model_report_generation:
    cmd: python src/model/generate_model_report.py
    wdir: ..
    deps:
      - ${model_training_inference_conf.save_model_output_dir}/test_outs
      - ${model_training_inference_conf.save_model_output_dir}/plots/metrics
    outs:
      - reports/model_report.md:
          cache: false
    desc: 'Generate a report with model training results'

  dag_saving:
    cmd: dvc dag --md --full > pipelines/dvc_dag.md
    wdir: ..
    deps:
      - reports/model_report.md
    outs:
      - pipelines/dvc_dag.md:
          cache: false
    desc: 'Save visualization of this ML pipeline as a DAG'
